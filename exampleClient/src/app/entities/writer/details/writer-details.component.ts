import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from "@angular/router";
import { FormArray, FormBuilder, FormControl, Validators } from '@angular/forms';

import { MatDialog } from '@angular/material/dialog';

import { WriterService } from '../writer.service';
import { IWriter } from '../iwriter';

import { BaseDetailsComponent, FieldType, PickerDialogService } from 'src/app/common/shared';
import { ErrorService } from 'src/app/core/services/error.service';


@Component({
  selector: 'app-writer-details',
  templateUrl: './writer-details.component.html',
  styleUrls: ['./writer-details.component.scss']
})
export class WriterDetailsComponent extends BaseDetailsComponent<IWriter> implements OnInit {
	title = 'Writer';
	parentUrl = 'writer';
	constructor(
		public formBuilder: FormBuilder,
		public router: Router,
		public route: ActivatedRoute,
		public dialog: MatDialog,
		public writerService: WriterService,
		public pickerDialogService: PickerDialogService,
		public errorService: ErrorService,
	) {
		super(formBuilder, router, route, dialog, pickerDialogService, writerService, errorService);
  }

	ngOnInit() {
		this.entityName = 'Writer';
		this.setAssociations();
		super.ngOnInit();
		this.setForm();
    	this.getItem();
	}
  
  setForm(){
    this.itemForm = this.formBuilder.group({
      email: ['', Validators.required],
      firstName: ['', Validators.required],
      id: [{value: '', disabled: true}, Validators.required],
      lastName: ['', Validators.required],
      username: [''],
      
    });
    
    this.fields = [
        {
		  name: 'username',
		  label: 'username',
		  isRequired: false,
		  isAutoGenerated: false,
	      type: FieldType.String,
	    },
        {
		  name: 'lastName',
		  label: 'last Name',
		  isRequired: true,
		  isAutoGenerated: false,
	      type: FieldType.String,
	    },
        {
		  name: 'firstName',
		  label: 'first Name',
		  isRequired: true,
		  isAutoGenerated: false,
	      type: FieldType.String,
	    },
        {
		  name: 'email',
		  label: 'email',
		  isRequired: true,
		  isAutoGenerated: false,
	      type: FieldType.String,
	    },
      ];
      
  }
  
  onItemFetched(item: IWriter) {
    this.item = item;
     this.itemForm.patchValue(item);

  }
  
  setAssociations(){
    this.associations = [
      {
        column: [
	        {
	          key: 'writerId',
	          value: undefined,
	          referencedkey: 'id'
			},
		],
		isParent: true,
		table: 'post',
		type: 'OneToMany',
		label: 'posts',
		},
		];
		
		this.childAssociations = this.associations.filter(association => {
			return (association.isParent);
		});

		this.parentAssociations = this.associations.filter(association => {
			return (!association.isParent);
		});
	}
	
	onSubmit() {
		let writer = this.itemForm.getRawValue();
		super.onSubmit(writer);
		
	}
}
